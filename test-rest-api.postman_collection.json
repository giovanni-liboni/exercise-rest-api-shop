{
	"info": {
		"_postman_id": "bb32e212-edb3-44d9-9a61-7499fdb631fd",
		"name": "Default-test-rest-api-corsmed",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[admin] Update item price",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = \"admin\";",
							"const password = \"admin\";",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": username, \"password\" : password})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\" : 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/items/3",
					"host": [
						"{{host}}"
					],
					"path": [
						"items",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Delete new item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = \"admin\";",
							"const password = \"admin\";",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": username, \"password\" : password})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/items/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"items",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Create an item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = \"admin\";",
							"const password = \"admin\";",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": username, \"password\" : password})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"Potion of Healing\",\n    \"description\" : \"A clear liquid, contained in a glass bottle etched with geometric patterns\",\n    \"price\" : 100.40\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/items",
					"host": [
						"{{host}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "[admin] Statistics",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = \"admin\";",
							"const password = \"admin\";",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": username, \"password\" : password})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/admin/statistics",
					"host": [
						"{{host}}"
					],
					"path": [
						"admin",
						"statistics"
					]
				}
			},
			"response": []
		},
		{
			"name": "[auth] Logout",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/auth/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "[auth] Get users me",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.collectionVariables.get(\"username\");",
							"const password = pm.collectionVariables.get(\"password\");",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": \"test\", \"password\" : \"test\"})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/users/me/orders",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"me",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "[auth] Get user orders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.collectionVariables.get(\"username\");",
							"const password = pm.collectionVariables.get(\"password\");",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": \"test\", \"password\" : \"test\"})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/users/me/orders?status=created",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"me",
						"orders"
					],
					"query": [
						{
							"key": "status",
							"value": "created"
						},
						{
							"key": "status",
							"value": "paid",
							"disabled": true
						},
						{
							"key": "status",
							"value": "pending",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[auth] Get user orders items",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.collectionVariables.get(\"username\");",
							"const password = pm.collectionVariables.get(\"password\");",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": \"test\", \"password\" : \"test\"})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/users/me/orders/6/items",
					"host": [
						"{{host}}"
					],
					"path": [
						"users",
						"me",
						"orders",
						"6",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "[auth] Purchase an item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.collectionVariables.get(\"username\");",
							"const password = pm.collectionVariables.get(\"password\");",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": username, \"password\" : password})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/items/1/purchase",
					"host": [
						"{{host}}"
					],
					"path": [
						"items",
						"1",
						"purchase"
					]
				}
			},
			"response": []
		},
		{
			"name": "[auth] Pay an order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.collectionVariables.get(\"username\");",
							"const password = pm.collectionVariables.get(\"password\");",
							"const tokenUrl = pm.collectionVariables.get(\"authService\");",
							"",
							"const getTokenRequest = {",
							"  method: 'POST',",
							"  url: tokenUrl,",
							"  body: {",
							"      mode: \"raw\",",
							"      raw: JSON.stringify({\"username\": username, \"password\" : password})",
							"  }",
							"};",
							"",
							"pm.sendRequest(getTokenRequest, (err, response) => {",
							"",
							"    console.log(response)",
							"  const jsonResponse = response.json();",
							"",
							"  const newAccessToken = jsonResponse.token;",
							"",
							"  pm.collectionVariables.set('token', newAccessToken);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/orders/6/pay",
					"host": [
						"{{host}}"
					],
					"path": [
						"orders",
						"6",
						"pay"
					]
				}
			},
			"response": []
		},
		{
			"name": "[public] Get list of items",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/items",
					"host": [
						"{{host}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "[public] Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "test",
							"type": "string"
						},
						{
							"key": "username",
							"value": "test",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"test\",\n    \"password\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/auth/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "[public] Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "test",
							"type": "string"
						},
						{
							"key": "username",
							"value": "test",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"JohnDoe\",\n    \"password\": \"test\",\n    \"firstname\" : \"John\",\n    \"lastname\" : \"Doe\",\n    \"email\" : \"john.doe@gmail.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "[public] Statistics",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/statistics",
					"host": [
						"{{host}}"
					],
					"path": [
						"statistics"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authService",
			"value": "http://exercise-rest-api-shop.liboni.me/auth/login"
		},
		{
			"key": "username",
			"value": "test"
		},
		{
			"key": "password",
			"value": "test"
		},
		{
			"key": "host",
			"value": "http://exercise-rest-api-shop.liboni.me"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}